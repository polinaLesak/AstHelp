// <auto-generated />
using System;
using Identity.Microservice.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Identity.Microservice.Infrastructure.Migrations
{
    [DbContext(typeof(EFDBContext))]
    [Migration("20241020174758_AddMachineAccount")]
    partial class AddMachineAccount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Identity.Microservice.Domain.Entities.MachineAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MachineAccounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = "9c125824-0c86-4c5e-b623-0765d998b441",
                            CreatedAt = new DateTime(2024, 10, 20, 17, 47, 57, 431, DateTimeKind.Utc).AddTicks(4709),
                            ServiceName = "Cart.Microservice"
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = "c54c4162-d3ac-4297-b77d-89d888a2d688",
                            CreatedAt = new DateTime(2024, 10, 20, 17, 47, 57, 431, DateTimeKind.Utc).AddTicks(4712),
                            ServiceName = "Catalog.Microservice"
                        },
                        new
                        {
                            Id = 3,
                            ApiKey = "c9035c54-7b64-4980-8a13-e11213ad2b9f",
                            CreatedAt = new DateTime(2024, 10, 20, 17, 47, 57, 431, DateTimeKind.Utc).AddTicks(4714),
                            ServiceName = "Orders.Microservice"
                        },
                        new
                        {
                            Id = 4,
                            ApiKey = "9aba0313-89bd-4aff-85c8-194ebc5e51dd",
                            CreatedAt = new DateTime(2024, 10, 20, 17, 47, 57, 431, DateTimeKind.Utc).AddTicks(4716),
                            ServiceName = "Notification.Microservice"
                        });
                });

            modelBuilder.Entity("Identity.Microservice.Domain.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Identity.Microservice.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Системный администратор"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ресурсный менеджер"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Сотрудник"
                        });
                });

            modelBuilder.Entity("Identity.Microservice.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Identity.Microservice.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Identity.Microservice.Domain.Entities.Profile", b =>
                {
                    b.HasOne("Identity.Microservice.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Identity.Microservice.Domain.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Identity.Microservice.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Identity.Microservice.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Identity.Microservice.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Identity.Microservice.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Identity.Microservice.Domain.Entities.User", b =>
                {
                    b.Navigation("Profile");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
